import { Component, OnInit, inject } from '@angular/core';
import {
  FormBuilder,
  FormGroup,
  ReactiveFormsModule,
  Validators,
} from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import { CommonModule } from '@angular/common';
import { PayslipService } from '../../services/payslip.service';

interface Employee {
  id: string;
  name: string;
}

@Component({
  selector: 'app-payslip-form',
  standalone: true,
  imports: [CommonModule, ReactiveFormsModule, RouterModule],
  templateUrl: './payslip-form.html',
})
export class PayslipForm implements OnInit {
  payslipForm!: FormGroup;
  isEditMode = false;
  loading = false;
  error: string | null = null;
  #employee: Employee | null = null;
  #showPreview = false;
  isPdfGenerated = false;
  payslipId: number | null = null;

  private readonly fb = inject(FormBuilder);
  private readonly payslipService = inject(PayslipService);
  private readonly router = inject(Router);
  private readonly route = inject(ActivatedRoute);

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      console.log('Received query params:', params);
      if (params['employeeId'] && params['employeeName']) {
        this.#employee = {
          id: params['employeeId'],
          name: params['employeeName']
        };

        if (params['payslipId']) {
          this.isEditMode = true;
          this.payslipId = parseInt(params['payslipId']);
          
          this.loadPayslipData(this.payslipId);
        } else {
          this.initializeForm();
          this.updateFormWithEmployeeData();
        }
      } else {
        this.initializeForm();
      }
    });
  }

  private loadPayslipData(payslipId: number): void {
    this.loading = true;
    this.payslipService.getPayslipById(payslipId).subscribe({
      next: (payslip: any) => {
        console.log('Loading existing payslip data:', payslip);
        this.initializeForm(payslip);
        this.updateFormWithEmployeeData();
        this.loading = false;
      },
      error: (error: any) => {
        console.error('Error loading payslip:', error);
        this.error = 'Error loading payslip data';
        this.initializeForm();
        this.updateFormWithEmployeeData();
        this.loading = false;
      }
    });
  }

  private initializeForm(data?: any): void {
    this.payslipForm = this.fb.group({
      name: [{ value: '', disabled: true }],
      empId: [{ value: '', disabled: true }],
      baseSalary: [
        data?.baseSalary || 0,
        [Validators.required, Validators.min(0.01), Validators.pattern(/^\d+$/)]
      ],
      allowances: [
        data?.allowances || 0,
        [Validators.required, Validators.min(0), Validators.pattern(/^\d+$/)]
      ],
      deductions: [
        data?.deductions || 0,
        [Validators.required, Validators.min(0), Validators.pattern(/^\d+$/)]
      ],
    });
  }

  private updateFormWithEmployeeData(): void {
    if (this.payslipForm && this.#employee) {
      this.payslipForm.patchValue({
        name: this.#employee.name,
        empId: this.#employee.id
      });
    }
  }

  public calculateNetSalary(): number {
    if (!this.payslipForm) return 0;

    const values = this.payslipForm.getRawValue();
    return (values.baseSalary || 0) + (values.allowances || 0) - (values.deductions || 0);
  }

  public getCurrentDate(): string {
    return new Date().toLocaleDateString('en-IN', {
      day: '2-digit',
      month: 'long',
      year: 'numeric',
    });
  }

  public togglePreview(): void {
    this.#showPreview = !this.#showPreview;
  }

  public get showPreview(): boolean {
    return this.#showPreview;
  }

  private handleError(error: any): void {
    console.error('Error:', error);
    this.error = error?.error?.message || 'An unexpected error occurred';
    setTimeout(() => this.error = null, 5000);
    this.loading = false;
  }

  public generatePDF(): void {
    if (!this.payslipForm.valid) {
      this.error = 'Please fill in all required fields correctly.';
      return;
    }

    const formValues = this.payslipForm.getRawValue();
    const payslipData = {
      employeeId: parseInt(formValues.empId),
      baseSalary: Math.round(Math.abs(Number(formValues.baseSalary))),
      allowances: Math.round(Math.abs(Number(formValues.allowances))),
      deductions: Math.round(Math.abs(Number(formValues.deductions))),
      createdBy: 22 // HR ID
    };

    // Validate the data
    if (payslipData.baseSalary <= 0) {
      this.error = 'Base salary must be greater than 0';
      return;
    }

    const netSalary = payslipData.baseSalary + payslipData.allowances - payslipData.deductions;
    if (netSalary < 0) {
      this.error = 'Net salary cannot be negative. Please check deductions.';
      return;
    }

    this.loading = true;
    
    if (this.isEditMode && this.payslipId) {
      this.payslipService.updatePayslip(this.payslipId, payslipData).subscribe({
        next: () => {
          alert('Payslip updated successfully!');
          void this.router.navigate(['/payslip-list']);
        },
        error: (error) => this.handleError(error),
        complete: () => this.loading = false
      });
    } else {
      this.payslipService.createAndGeneratePdf(payslipData).subscribe({
        next: () => {
          this.isPdfGenerated = true;
          alert('Payslip generated successfully!');
          void this.router.navigate(['/payslip-list']);
        },
        error: (error) => this.handleError(error),
        complete: () => this.loading = false
      });
    }
  }
}
