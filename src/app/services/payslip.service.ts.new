import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, retry, map } from 'rxjs/operators';
import { Payslip } from '../models/payslip.model';
import { environment } from '../../environments/environment';

@Injectable({
  providedIn: 'root'
})
export class PayslipService {
  private apiUrl = `${environment.apiUrl}/api/Payslips`;

  private httpOptions = {
    headers: new HttpHeaders({
      'Content-Type': 'application/json',
      'Accept': 'application/json'
    })
  };

  constructor(private http: HttpClient) {}

  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'An error occurred';
    if (error.error instanceof ErrorEvent) {
      errorMessage = error.error.message;
    } else {
      errorMessage = `Error Code: ${error.status}\nMessage: ${error.message}`;
    }
    console.error(errorMessage);
    return throwError(() => new Error(errorMessage));
  }

  // GET all payslips
  getAllPayslips(): Observable<Payslip[]> {
    return this.http.get<any[]>(this.apiUrl, this.httpOptions)
      .pipe(
        map(response => {
          if (!Array.isArray(response)) return [];
          return response.map(item => ({
            id: item.id,
            employeeId: Number(item.employeeId),
            salary: Number(item.salary || 0),
            baseSalary: Number(item.baseSalary || 0),
            allowances: Number(item.allowances || 0),
            deductions: Number(item.deductions || 0),
            netSalary: Number(item.netSalary || 0),
            pdfPath: item.pdfPath,
            month: item.month,
            status: item.status ?? false,
            createdBy: Number(item.createdBy || 22),
            createdDateTime: item.createdDateTime ? new Date(item.createdDateTime) : new Date(),
            updatedBy: item.updatedBy ? Number(item.updatedBy) : undefined,
            updatedDateTime: item.updatedDateTime ? new Date(item.updatedDateTime) : undefined
          }));
        }),
        retry(1),
        catchError(this.handleError)
      );
  }

  // GET by ID
  getPayslipById(id: number): Observable<Payslip> {
    return this.http.get<Payslip>(`${this.apiUrl}/${id}`, this.httpOptions)
      .pipe(retry(1), catchError(this.handleError));
  }

  // CREATE payslip
  createPayslip(payslip: Payslip): Observable<Payslip> {
    const cleanPayslip = {
      employeeId: Math.abs(Math.round(Number(payslip.employeeId))),
      salary: Math.max(1, Math.round(Number(payslip.salary))),
      baseSalary: Math.max(1, Math.round(Number(payslip.baseSalary))),
      allowances: Math.max(0, Math.round(Number(payslip.allowances))),
      deductions: Math.max(0, Math.round(Number(payslip.deductions))),
      month: payslip.month || new Date().toLocaleString('default', { month: 'long' }),
      status: payslip.status ?? true,
      createdBy: 22
    };

    return this.http.post<Payslip>(this.apiUrl, cleanPayslip, this.httpOptions).pipe(
      map(response => {
        if (!response) throw new Error('Empty response from server');
        return response;
      }),
      catchError((error: HttpErrorResponse) => {
        let errorMessage = '';
        if (error.status === 500) {
          errorMessage = 'Server error. Check if the employee ID exists and all values are valid.';
        } else {
          errorMessage = error.error?.message || error.message || 'An unexpected error occurred';
        }
        return throwError(() => ({
          status: error.status,
          message: errorMessage,
          error: error.error
        }));
      })
    );
  }

  // CREATE and generate PDF in one step
  createAndGeneratePdf(payslipData: Payslip, htmlContent: string): Observable<any> {
    // Create minimal payload with only required fields and proper casing
    const cleanPayslip = {
      employeeId: 123, // Fixed test value
      salary: 50000,   // Fixed test value
      baseSalary: 40000, // Fixed test value (80% of salary)
      allowances: 10000, // Fixed test value (20% of salary)
      deductions: 5000,  // Fixed test value
      month: "September 2025",
      createdBy: 22     // Fixed HR ID
    };

    const data = {
      payslip: cleanPayslip,
      htmlContent: htmlContent
    };

    // Debug logs
    console.log('Making API request to:', `${this.apiUrl}/create-and-generate-pdf`);
    console.log('Request payload:', JSON.stringify(data, null, 2));

    return this.http.post(`${this.apiUrl}/create-and-generate-pdf`, data, this.httpOptions)
      .pipe(
        map(response => {
          console.log('Successfully created and generated PDF:', response);
          return response;
        }),
        catchError((error: HttpErrorResponse) => {
          console.error('Error in createAndGeneratePdf:', error);
          return throwError(() => error);
        })
      );
  }
}
